// C++ program for Quick Sort

#include <iostream>
using namespace std;

/* This function takes last element as pivot, places
   the pivot element at its correct position in sorted
    array, and places all smaller (smaller than pivot)
   to left of pivot and all greater elements to right
   of pivot */
   
int partition(int arr[],int low,int high)
{
    int pivot=arr[high];
    int i=low-1;
    for(int j=low; j<=high-1; j++)
    {
        if(arr[j]<=pivot)
        {
            i=i+1;
            swap(arr[i],arr[j]);
        }
    }
    swap(arr[i+1],arr[high]);
    return (i+1);
}

/* The main function that implements QuickSort
 arr[] --> Array to be sorted,
  low  --> Starting index,
  high  --> Ending index */

void quicksort(int arr[],int low,int high)
{
    if(low<high)
    {
// pivot_index is partitioning index, arr[pivot_index] is now at right place //
        int pivot_index = partition(arr,low,high);
         // Separately sort elements before partition and after partition //
        quicksort(arr,low,pivot_index-1);
        quicksort(arr,pivot_index+1,high);
    }
}
void printArray(int arr[], int size)
{
    for (int i=0; i < size; i++)
        cout<<arr[i]<<" ";
    cout<<"\n";
}
int main()
{
    int n;
    cout<<"Enter the no.of elements:\n";
    cin>>n;
    int arr[n];
    cout<<"Enter  elements in array:\n ";
    for(int i=0; i<n; i++)
        cin>>arr[i];
    quicksort(arr,0,n-1);
    cout<<"Sorted array is:\n";
    printArray(arr,n);
    return 0;
}
